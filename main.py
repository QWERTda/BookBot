import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from config import API_TOKEN

import requests

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–º —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö
messages = {
    "start": {
        "kk": "–°”ô–ª–µ–º! “ö–æ–ª–∞–π–ª—ã —Ç—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑: “õ–∞–∑–∞“õ—à–∞ –Ω–µ–º–µ—Å–µ –æ—Ä—ã—Å—à–∞.",
        "ru": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —è–∑—ã–∫: –∫–∞–∑–∞—Ö—Å–∫–∏–π –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π.",
    },
    "language_set": {
        "kk": "–¢—ñ–ª —Ç–∞“£–¥–∞–ª–¥—ã: “õ–∞–∑–∞“õ—à–∞. –ï–Ω–¥—ñ –∫—ñ—Ç–∞–ø—Ç—ã —ñ–∑–¥–µ“£—ñ–∑.",
        "ru": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Ä—É—Å—Å–∫–∏–π. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
    },
    "book_not_found": {
        "kk": "–ö—ñ—Ç–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã. –ê–≤—Ç–æ—Ä –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ—É –±–∞—Å—Ç–∞–ª–¥—ã...",
        "ru": "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É...",
    },
    "author_not_found": {
        "kk": "–ê–≤—Ç–æ—Ä –±–æ–π—ã–Ω—à–∞ –¥–∞ –µ—à—Ç–µ“£–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.",
        "ru": "–ü–æ –∞–≤—Ç–æ—Ä—É —Ç–æ–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
    },
    "book_info": {
        "kk": "üìö {title}\n–ê–≤—Ç–æ—Ä(–ª–∞—Ä): {author}\n[–ö—ñ—Ç–∞–ø –∂–∞–π–ª—ã —Ç–æ–ª—ã“ì—ã—Ä–∞“õ]({link})",
        "ru": "üìö {title}\n–ê–≤—Ç–æ—Ä(—ã): {author}\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–Ω–∏–≥–µ]({link})",
    },
}


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
    if user_id not in user_languages:
        user_languages[user_id] = "ru"

    await message.answer(messages["start"]["ru"], reply_markup=get_language_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message(lambda message: message.text in {"“ö–∞–∑–∞“õ—à–∞", "–†—É—Å—Å–∫–∏–π"})
async def set_language(message: Message):
    user_id = message.from_user.id
    if message.text == "“ö–∞–∑–∞“õ—à–∞":
        user_languages[user_id] = "kk"
        await message.answer(messages["language_set"]["kk"])
    else:
        user_languages[user_id] = "ru"
        await message.answer(messages["language_set"]["ru"])


# –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ Open Library API
@dp.message()
async def search_books(message: Message):
    user_id = message.from_user.id
    language = user_languages.get(user_id, "ru")  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    query = message.text
    url = f"https://openlibrary.org/search.json?title={query}"
    response = requests.get(url)
    data = response.json()

    if data["numFound"] > 0:
        for book in data["docs"][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            title = book.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            author = ", ".join(book.get("author_name", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã"]))
            olid = book.get("key")  # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫–Ω–∏–≥–∏
            book_url = f"https://openlibrary.org{olid}"  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏

            await message.answer(
                messages["book_info"][language].format(title=title, author=author, link=book_url),
                disable_web_page_preview=True,
            )
    else:
        await message.answer(messages["book_not_found"][language])
        await search_by_author(query, message, language)  # –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É


# –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∞–≤—Ç–æ—Ä—É
async def search_by_author(author_name, message, language):
    url = f"https://openlibrary.org/search.json?author={author_name}"
    response = requests.get(url)
    data = response.json()

    if data["numFound"] > 0:
        for book in data["docs"][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            title = book.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            author = ", ".join(book.get("author_name", ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã"]))
            olid = book.get("key")  # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫–Ω–∏–≥–∏
            book_url = f"https://openlibrary.org{olid}"  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏

            await message.answer(
                messages["book_info"][language].format(title=title, author=author, link=book_url),
                disable_web_page_preview=True,
            )
    else:
        await message.answer(messages["author_not_found"][language])


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="“ö–∞–∑–∞“õ—à–∞"), KeyboardButton(text="–†—É—Å—Å–∫–∏–π")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫–∏ (–µ—Å–ª–∏ –±—ã–ª–∏)
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥


if __name__ == "__main__":
    asyncio.run(main())
